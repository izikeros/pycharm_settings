<application>
  <component name="ConversationToolStoreService">
    <option name="builtInTools" value="[{&quot;name&quot;:&quot;insert_edit_into_file&quot;,&quot;description&quot;:&quot;Edit a file in the workspace. Use this tool once per file that needs to be modified, even if there are multiple changes for a file. Generate the \&quot;explanation\&quot; property first.\nThe system is very smart and can understand how to apply your edits to the files, you just need to provide minimal hints.\nAvoid repeating existing code, instead use comments to represent regions of unchanged code. Be as concise as possible. For example:\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n\nHere is an example of how you should use format an edit to an existing Person class:\nclass Person {\n\t// ...existing code...\n\tage: number;\n\t// ...existing code...\n\tgetAge() {\n\treturn this.age;\n\t}\n}&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;filePath&quot;:{&quot;description&quot;:&quot;The absolute path of the file to edit.&quot;,&quot;type&quot;:&quot;string&quot;},&quot;code&quot;:{&quot;description&quot;:&quot;The code change to apply to the file.\nThe system is very smart and can understand how to apply your edits to the files, you just need to provide minimal hints.\nAvoid repeating existing code, instead use comments to represent regions of unchanged code. Be as concise as possible. For example:\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n\nHere is an example of how you should use format an edit to an existing Person class:\nclass Person {\n\t// ...existing code...\n\tage: number;\n\t// ...existing code...\n\tgetAge() {\n\t\treturn this.age;\n\t}\n}&quot;,&quot;type&quot;:&quot;string&quot;},&quot;explanation&quot;:{&quot;description&quot;:&quot;A short explanation of the edit being made.&quot;,&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;filePath&quot;,&quot;code&quot;,&quot;explanation&quot;]},&quot;type&quot;:&quot;shared&quot;,&quot;id&quot;:&quot;copilot.insert_edit_into_file&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;run_in_terminal&quot;,&quot;description&quot;:&quot;This tool allows you to execute shell commands in a persistent terminal session, preserving environment variables, working directory, and other context across multiple commands.\\n\\nCommand Execution:\\n- Supports chaining with \u0026\u0026 or ; (e.g., npm install \u0026\u0026 npm start).\\n- Supports multi-line commands \\n\\nDirectory Management:\\n- Use absolute paths to avoid navigation issues.\\n\\nProgram Execution:\\n- Supports Python, Node.js, and other executables.\\n- Install dependencies via pip, npm, etc.\\n\\nBackground Processes:\\n- For long-running tasks (e.g., servers), set isBackground\u003dtrue.\\n- Returns a terminal ID for checking status and runtime later.\\n\\nImportant Notes:\\n- If the command may produce excessively large output, use head or tail to reduce the output.\\n- If a command may use a pager, you must something to disable it. For example, you can use `git --no-pager`. Otherwise you should add something like ` | cat`. Examples: git, less, man, etc.&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;command&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;The command to run in the terminal.&quot;},&quot;explanation&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;A one-sentence description of what the command does. This will be shown to the user before the command is run.&quot;},&quot;isBackground&quot;:{&quot;type&quot;:&quot;boolean&quot;,&quot;description&quot;:&quot;Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of backgrond processes: building in watch mode, starting a server. You can check the output of a backgrond process later on by using copilot_getTerminalOutput.&quot;}},&quot;required&quot;:[&quot;command&quot;,&quot;explanation&quot;,&quot;isBackground&quot;]},&quot;confirmationMessages&quot;:{&quot;title&quot;:&quot;Run Command in Terminal&quot;,&quot;message&quot;:&quot;This command will be executed in your local terminal. Please review it carefully before proceeding.&quot;},&quot;type&quot;:&quot;client&quot;,&quot;id&quot;:&quot;copilot-editor.run_in_terminal&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;get_terminal_output&quot;,&quot;description&quot;:&quot;Get the output of a terminal command previous started with run_in_terminal&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;id&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;The ID of the terminal command output to check.&quot;}},&quot;required&quot;:[&quot;id&quot;]},&quot;type&quot;:&quot;client&quot;,&quot;id&quot;:&quot;copilot-editor.get_terminal_output&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;create_file&quot;,&quot;description&quot;:&quot;This is a tool for creating a new file in the workspace. The file will be created with the specified content.&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;filePath&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;The absolute path to the file to create.&quot;},&quot;content&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;The content to write to the file.&quot;}},&quot;required&quot;:[&quot;filePath&quot;,&quot;content&quot;]},&quot;type&quot;:&quot;client&quot;,&quot;id&quot;:&quot;copilot-editor.create_file&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;get_errors&quot;,&quot;description&quot;:&quot;Get any compile or lint errors in a code file. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. Also use this tool after editing a file to validate the change.&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;filePaths&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;description&quot;:&quot;Array of absolute file paths to check for errors&quot;}},&quot;required&quot;:[&quot;filePaths&quot;]},&quot;type&quot;:&quot;client&quot;,&quot;id&quot;:&quot;copilot-editor.get_errors&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;list_dir&quot;,&quot;description&quot;:&quot;List the contents of a directory. Result will have the name of the child. If the name ends in /, it\u0027s a folder, otherwise a file&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;path&quot;:{&quot;description&quot;:&quot;The absolute path to the directory to list.&quot;,&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;path&quot;]},&quot;type&quot;:&quot;shared&quot;,&quot;id&quot;:&quot;copilot.list_dir&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;read_file&quot;,&quot;description&quot;:&quot;Read the contents of a file.\n\nYou must specify the line range you\u0027re interested in, and if the file is larger, you will be given an outline of the rest of the file. If the file contents returned are insufficient for your task, you may call this tool again to retrieve more content.&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;filePath&quot;:{&quot;description&quot;:&quot;The absolute path of the file to read.&quot;,&quot;type&quot;:&quot;string&quot;},&quot;startLineNumberBaseZero&quot;:{&quot;description&quot;:&quot;The line number to start reading from, 0-based.&quot;,&quot;type&quot;:&quot;number&quot;},&quot;endLineNumberBaseZero&quot;:{&quot;description&quot;:&quot;The inclusive line number to end reading at, 0-based.&quot;,&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;filePath&quot;,&quot;startLineNumberBaseZero&quot;,&quot;endLineNumberBaseZero&quot;]},&quot;type&quot;:&quot;shared&quot;,&quot;id&quot;:&quot;copilot.read_file&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;file_search&quot;,&quot;description&quot;:&quot;Search for files in the workspace by glob pattern. This only returns the paths of matching files. Use this tool when you know the exact filename pattern of the files you\u0027re searching for. Glob patterns match from the root of the workspace folder. Examples:\n- **/*.{js,ts} to match all js/ts files in the workspace.\n- src/** to match all files under the top-level src folder.\n- **/foo/**/*.js to match all js files under any foo folder in the workspace.&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;query&quot;:{&quot;description&quot;:&quot;Search for files with names or paths matching this glob pattern.&quot;,&quot;type&quot;:&quot;string&quot;},&quot;maxResults&quot;:{&quot;description&quot;:&quot;The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don\u0027t see what you\u0027re looking for, you can try again with a more specific query or a larger maxResults.&quot;,&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;query&quot;]},&quot;type&quot;:&quot;shared&quot;,&quot;id&quot;:&quot;copilot.file_search&quot;,&quot;status&quot;:&quot;enabled&quot;},{&quot;name&quot;:&quot;grep_search&quot;,&quot;description&quot;:&quot;Do a text search in the workspace. Use this tool when you know the exact string you\u0027re searching for.&quot;,&quot;inputSchema&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;query&quot;:{&quot;description&quot;:&quot;The pattern to search for in files in the workspace. Can be a regex or plain text pattern&quot;,&quot;type&quot;:&quot;string&quot;},&quot;isRegexp&quot;:{&quot;description&quot;:&quot;Whether the pattern is a regex. False by default.&quot;,&quot;type&quot;:&quot;boolean&quot;},&quot;includePattern&quot;:{&quot;description&quot;:&quot;Search files matching this glob pattern. Will be applied to the relative path of files within the workspace.&quot;,&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;query&quot;]},&quot;type&quot;:&quot;shared&quot;,&quot;id&quot;:&quot;copilot.grep_search&quot;,&quot;status&quot;:&quot;enabled&quot;}]" />
  </component>
</application>